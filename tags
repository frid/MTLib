!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CVector3d	src/vector/vector.cpp	/^CVector3d(const CVector3d& a_source) {$/;"	f
CVector3d	src/vector/vector.cpp	/^CVector3d(const double* a_in) {$/;"	f
CVector3d	src/vector/vector.cpp	/^CVector3d(const float* a_in) {$/;"	f
CVector3d	src/vector/vector.cpp	/^CVector3d::CVector3d() {$/;"	f	class:CVector3d
CVector3d	src/vector/vector.cpp	/^CVector3d::CVector3d(const double a1, const double a2,		\/* Passing 3 double values *\/$/;"	f	class:CVector3d
CVector3d	src/vector/vector.h	/^		class CVector3d$/;"	c	namespace:MTLib
H_CVECTOR3D	src/vector/vector.h	3;"	d
MTLib	src/vector/vector.h	/^namespace MTLib {$/;"	n
add	src/vector/vector.cpp	/^inline void CVector3d::add(const cVector3d& a_vector) {$/;"	f	class:CVector3d
add	src/vector/vector.cpp	/^inline void CVector3d::add(const double& a_x, const double& a_y, const double& a_z) {$/;"	f	class:CVector3d
addr	src/vector/vector.cpp	/^inline void CVector3d::addr(const cVector3d& a_vector, cVector3d& a_result) {$/;"	f	class:CVector3d
addr	src/vector/vector.cpp	/^inline void CVector3d::addr(const double& a_x, const double& a_y, const double& a_z, cVector3d& a_result) {$/;"	f	class:CVector3d
copyfrom	src/vector/vector.cpp	/^inline void CVector3d::copyfrom(const cVector3d &a_source) {$/;"	f	class:CVector3d
copyto	src/vector/vector.cpp	/^inline void CVector3d::copyto(cVector3d& a_destination) {$/;"	f	class:CVector3d
cross	src/vector/vector.cpp	/^inline void CVector3d::cross(const cVector3d& a_vector) {$/;"	f	class:CVector3d
crossAndReturn	src/vector/vector.cpp	/^inline CVector3d::cVector3d crossAndReturn(const cVector3d& a_vector) {$/;"	f
crossr	src/vector/vector.cpp	/^inline void CVector3d::crossr(const cVector3d& a_vector, cVector3d& a_result) {$/;"	f	class:CVector3d
d	src/vector/vector.h	/^					double d[3];$/;"	m	class:MTLib::CVector3d
data	src/vector/vector.h	/^					double data[3];$/;"	m	class:MTLib::CVector3d
distance	src/vector/vector.cpp	/^inline double CVector3d::distance(const cVector3d& a_vector) {$/;"	f	class:CVector3d
distancesq	src/vector/vector.cpp	/^inline double CVector3d::distancesq(const cVector3d& a_vector) {$/;"	f	class:CVector3d
div	src/vector/vector.cpp	/^inline void CVector3d::div(const double &a_scalar) {$/;"	f	class:CVector3d
divr	src/vector/vector.cpp	/^inline void CVector3d::divr(const double& a_scalar, cVector3d& a_result) {$/;"	f	class:CVector3d
dot	src/vector/vector.cpp	/^inline double CVector3d::dot(const cVector3d& a_vector) {$/;"	f	class:CVector3d
elementMul	src/vector/vector.cpp	/^inline void CVector3d::elementMul(const cVector3d& a_vector) {$/;"	f	class:CVector3d
elementMulr	src/vector/vector.cpp	/^inline void CVector3d::elementMulr(const cVector3d& a_vector, cVector3d& a_result) {$/;"	f	class:CVector3d
equals	src/vector/vector.cpp	/^inline bool CVector3d::equals(const cVector3d& a_vector, const double epsilon=0.0) {$/;"	f	class:CVector3d
get	src/vector/vector.cpp	/^inline double CVector3d::get(const unsigned int& a_component) {$/;"	f	class:CVector3d
length	src/vector/vector.cpp	/^inline double CVector3d::length() {$/;"	f	class:CVector3d
lengthsq	src/vector/vector.cpp	/^inline double CVector3d::lengthsq(void) {$/;"	f	class:CVector3d
main	main.cpp	/^int main ( int argc, char *argv[] )$/;"	f
mul	src/vector/vector.cpp	/^inline void CVector3d::mul(const double &a_scalar) {$/;"	f	class:CVector3d
mulr	src/vector/vector.cpp	/^inline void CVector3d::mulr(const double& a_scalar, cVector3d& a_result) {$/;"	f	class:CVector3d
negate	src/vector/vector.cpp	/^inline void CVector3d::negate() {$/;"	f	class:CVector3d
negater	src/vector/vector.cpp	/^inline void CVector3d::negater(cVector3d& a_result) {$/;"	f	class:CVector3d
normalize	src/vector/vector.cpp	/^inline void CVector3d::normalize() {$/;"	f	class:CVector3d
normalizer	src/vector/vector.cpp	/^inline void CVector3d::normalizer(cVector3d& a_result) {$/;"	f	class:CVector3d
ones	src/vector/vector.cpp	/^inline void CVector3d::ones( void ) {$/;"	f	class:CVector3d
operator *	src/vector/vector.cpp	/^inline CVector3d CVector3d::operator*(const CVector3d& a_v, const double a_input)	 {$/;"	f	class:CVector3d
operator *	src/vector/vector.cpp	/^inline CVector3d CVector3d::operator*(const double a_input, const CVector3d& a_v)	{$/;"	f	class:CVector3d
operator *=	src/vector/vector.cpp	/^inline void CVector3d::operator*= (const double& a_val) {$/;"	f	class:CVector3d
operator +	src/vector/vector.cpp	/^inline CVector3d CVector3d::operator+(const CVector3d& a_v1, const cVector3d& a_v2)	 {$/;"	f	class:CVector3d
operator +=	src/vector/vector.cpp	/^inline void CVector3d::operator+= (const double& a_val) {$/;"	f	class:CVector3d
operator -	src/vector/vector.cpp	/^inline CVector3d CVector3d::operator-(const CVector3d& a_v1, const cVector3d& a_v2)	 {$/;"	f	class:CVector3d
operator -=	src/vector/vector.cpp	/^inline void CVector3d::operator-= (const double& a_val) {$/;"	f	class:CVector3d
operator /	src/vector/vector.cpp	/^inline CVector3d CVector3d::operator\/(const CVector3d& a_v, const double a_input) {$/;"	f	class:CVector3d
operator /=	src/vector/vector.cpp	/^inline void CVector3d::operator\/= (const double& a_val) {$/;"	f	class:CVector3d
operator <<	src/vector/vector.cpp	/^static inline std::ostream & CVector3d::operator << (std::ostream &a_os, cVector3d const& a_vec) {$/;"	f	class:CVector3d
operator []	src/vector/vector.cpp	/^double  CVector3d::operator[] (unsigned int a_index) {$/;"	f	class:CVector3d
operator []	src/vector/vector.cpp	/^double& CVector3d::operator[] (unsigned int a_index) {$/;"	f	class:CVector3d
print	src/vector/vector.cpp	/^inline void CVector3d::print(const unsigned int a_precision=2) {$/;"	f	class:CVector3d
set	src/vector/vector.cpp	/^inline void CVector3d::set(const double& a_x, const double& a_y, const double& a_z) {$/;"	f	class:CVector3d
str	src/vector/vector.cpp	/^inline string CVector3d::str(const unsigned int a_precision=2) {$/;"	f	class:CVector3d
str	src/vector/vector.cpp	/^inline void CVector3d::str(string& a_string, const unsigned int a_precision=2) {$/;"	f	class:CVector3d
sub	src/vector/vector.cpp	/^inline void  CVector3d::sub(const cVector3d& a_vector) {$/;"	f	class:CVector3d
sub	src/vector/vector.cpp	/^inline void  CVector3d::sub(const double& a_x, const double& a_y, const double& a_z) {$/;"	f	class:CVector3d
subr	src/vector/vector.cpp	/^inline void  CVector3d::subr(const cVector3d& a_vector, cVector3d& a_result) {$/;"	f	class:CVector3d
subr	src/vector/vector.cpp	/^inline void  CVector3d::subr(const double& a_x, const double& a_y, const double& a_z,$/;"	f	class:CVector3d
x	src/vector/vector.h	/^				  double & x = d[0];$/;"	m	class:MTLib::CVector3d
y	src/vector/vector.h	/^					double & y = d[1];$/;"	m	class:MTLib::CVector3d
z	src/vector/vector.h	/^					double & z = d[2];$/;"	m	class:MTLib::CVector3d
zero	src/vector/vector.cpp	/^inline void CVector3d::zero( void ) {$/;"	f	class:CVector3d
~CVector3d	src/vector/vector.cpp	/^CVector3d::~CVector3d(){$/;"	f	class:CVector3d
